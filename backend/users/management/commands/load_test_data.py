import json
from pathlib import Path
from django.core.management.base import BaseCommand
from django.core.files import File
from django.contrib.auth.hashers import make_password
from users.models import CustomUser, Follow
from recipes.models import Ingredient, Recipe, RecipeIngredient, Favorite, ShoppingCart


class Command(BaseCommand):
    help = '–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ data/test_data.json, –∏—Å–ø–æ–ª—å–∑—É—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã.'

    def handle(self, *args, **kwargs):
        self.stdout.write(self.style.WARNING('‚ö†Ô∏è  –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö...'))

        # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ —Å FK)
        models_to_clear = [
            Follow, Favorite, ShoppingCart,
            RecipeIngredient, Recipe,
            CustomUser
        ]
        for model in models_to_clear:
            count_deleted, _ = model.objects.all().delete()
            self.stdout.write(self.style.SUCCESS(f'üóëÔ∏è {model.__name__}: —É–¥–∞–ª–µ–Ω–æ {count_deleted} –∑–∞–ø–∏—Å–µ–π'))

        media_root = Path('media')  # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ media

        try:
            with open('data/test_data.json', encoding='utf-8') as file:
                data = json.load(file)

            users_map = {}
            recipes_map = {}
            ingredients_map = {ing.id: ing for ing in Ingredient.objects.all()}

            # === 1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ===
            for item in data:
                if item['model'] == 'users.customuser':
                    fields = item['fields']
                    raw_password = fields.get('password', '12345')
                    user = CustomUser.objects.create(
                        pk=item['pk'],
                        email=fields['email'],
                        username=fields['username'],
                        first_name=fields.get('first_name', ''),
                        last_name=fields.get('last_name', ''),
                        avatar=fields.get('avatar', 'recipes/images/default.jpg'),
                        is_staff=fields.get('is_staff', False),
                        is_superuser=fields.get('is_superuser', False),
                        is_active=fields.get('is_active', True),
                        password=make_password(raw_password)
                    )
                    users_map[item['pk']] = user
            self.stdout.write(self.style.SUCCESS(f'‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(users_map)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'))

            # === 2. –ü–æ–¥–ø–∏—Å–∫–∏ ===
            for item in data:
                if item['model'] == 'users.follow':
                    fields = item['fields']
                    Follow.objects.create(
                        pk=item['pk'],
                        subscriber=users_map[fields['subscriber']],
                        author=users_map[fields['author']],
                        created_at=fields['created_at']
                    )
            self.stdout.write(self.style.SUCCESS('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã'))

            # === 3. –†–µ—Ü–µ–ø—Ç—ã ===
            for item in data:
                if item['model'] == 'recipes.recipe':
                    fields = item['fields']
                    recipe = Recipe(
                        name=fields['name'],
                        description=fields['description'],
                        author=users_map[fields['author']],
                        cooking_time=fields['cooking_time'],
                        pub_date=fields['pub_date']
                    )

                    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    image_file_path = media_root / fields.get('image', 'recipes/images/default.jpg')
                    if image_file_path.exists():
                        with open(image_file_path, 'rb') as f:
                            recipe.image.save(image_file_path.name, File(f), save=False)
                    else:
                        recipe.image = 'recipes/images/default.jpg'

                    recipe.save()
                    recipes_map[item['pk']] = recipe
            self.stdout.write(self.style.SUCCESS(f'‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(recipes_map)} —Ä–µ—Ü–µ–ø—Ç–æ–≤'))

            # === 4. –°–æ—Å—Ç–∞–≤ —Ä–µ—Ü–µ–ø—Ç–æ–≤ ===
            for item in data:
                if item['model'] == 'recipes.recipeingredient':
                    fields = item['fields']
                    recipe = recipes_map[fields['recipe']]
                    ingredient_name = next(
                        ing['fields']['name'] for ing in data
                        if ing['model'] == 'recipes.ingredient' and ing['pk'] == fields['ingredient']
                    )
                    try:
                        ingredient = Ingredient.objects.get(name=ingredient_name)
                    except Ingredient.DoesNotExist:
                        self.stderr.write(self.style.ERROR(f'‚ùå –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç "{ingredient_name}" –Ω–µ –Ω–∞–π–¥–µ–Ω'))
                        continue

                    RecipeIngredient.objects.create(
                        recipe=recipe,
                        ingredient=ingredient,
                        amount=fields['amount']
                    )
            self.stdout.write(self.style.SUCCESS('‚úÖ –°–æ—Å—Ç–∞–≤ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω'))

            # === 5. –ò–∑–±—Ä–∞–Ω–Ω–æ–µ ===
            for item in data:
                if item['model'] == 'recipes.favorite':
                    fields = item['fields']
                    Favorite.objects.create(
                        user=users_map[fields['user']],
                        recipe=recipes_map[fields['recipe']],
                        added_at=fields.get('added_at')
                    )
            self.stdout.write(self.style.SUCCESS('‚úÖ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ'))

            # === 6. –ö–æ—Ä–∑–∏–Ω–∞ ===
            for item in data:
                if item['model'] == 'recipes.shoppingcart':
                    fields = item['fields']
                    ShoppingCart.objects.create(
                        user=users_map[fields['user']],
                        recipe=recipes_map[fields['recipe']]
                    )
            self.stdout.write(self.style.SUCCESS('‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞'))

        except Exception as error:
            self.stderr.write(self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞: {error}'))
